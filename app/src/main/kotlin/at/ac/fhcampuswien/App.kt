/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        var done: Boolean = false
        val guessNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        var rounds: Int = 0

        // println(guessNumber) testing reasons
        println("The digit to guess has the size of $digitsToGuess digits")

        while (!done){
            var inputOfUser = readlnOrNull()!!.toInt()
            var solution = checkUserInputAgainstGeneratedNumber(inputOfUser,guessNumber)
            println(solution)
            if(solution.m == digitsToGuess && solution.n == digitsToGuess){
                done = true
            }
            rounds++
        }

        println("You needed $rounds tryÂ´s")
        //TODO: build a menu which calls the functions and works with the return values
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length > 9 || length < 1){
            throw IllegalArgumentException("Number is not valid")
        }
        var done: Boolean = false
        var numberList = mutableListOf<Int>()

        while (!done){
            numberList.add((1..9).random())
            if (numberList.toSet().size == length){
                numberList = numberList.toSet().toMutableList()
                done = true
            }
        }

        //TODO implement the function
        numberList.joinToString("").toInt()   // return value is a placeholder
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val inputList = input.toString().map { it.toString().toInt() }
        val generatedNumberList = generatedNumber.toString().map { it.toString().toInt() }

        if (inputList.size != generatedNumberList.size || generatedNumberList.toSet().size != generatedNumberList.size){
            throw IllegalArgumentException("")
        }

        var correctNumbers = 0

        for (i in inputList.toSet()){
            if (generatedNumberList.contains(i))
            {
                correctNumbers++
            }
        }

        var correctPositions = 0

        inputList.forEachIndexed { index, value ->
            if (inputList[index] == value && generatedNumberList[index] == value){
                correctPositions++
            }
        }

        //TODO implement the function
        CompareResult(correctNumbers, correctPositions)   // return value is a placeholder
    }
}

fun main() {
    var gameClass = App()
    gameClass.playNumberGame()
    println("-------------------")
    gameClass.playNumberGame(8) // HARD MODE ;)
    println("-------------------")
    // TODO: call the App.playNumberGame function with and without default arguments
}
